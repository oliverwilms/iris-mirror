ROUTINE ZMIRROR
ZMIRROR
	Quit
	; https://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GHA_mirror#GHA_mirror_set_tunable_params_zmirror_routine
CanNodeStartToBecomePrimary()
	New
	Try {
		Set zstu = $Increment(^TESTzstu)
		Set ^TESTzstu(zstu) = $ZDateTime($NOW(),8,1,3)_" : "_$JOB_" : "_"CanNodeStartToBecomePrimary"_" : "_"ZMIRROR"
	} Catch(ex) { }
	Quit 1
	// If you move code from existing ^ZSTU or ^ZSTART routines on the primary to ^ZMIRROR so that it is not executed until the mirror is initialized,
	//  CheckBecomePrimaryOK is the best location for it.
CheckBecomePrimaryOK()
	New
	Try {
		Set zstu = $Increment(^TESTzstu)
		Set ^TESTzstu(zstu) = $ZDateTime($NOW(),8,1,3)_" : "_$JOB_" : "_"CheckBecomePrimaryOK"_" : "_"ZMIRROR"
	} Catch(ex) { }
	Quit 1
	;
NotifyBecomePrimary()
	New
	Try {
		Set zstu = $Increment(^TESTzstu)
		Set ^TESTzstu(zstu) = $ZDateTime($NOW(),8,1,3)_" : "_$JOB_" : "_"NotifyBecomePrimary"_" : "_"ZMIRROR"
		Set host = $SYSTEM.INetInfo.LocalHostName()  // ip-10-123-45-67.us-gov-west-1.compute.internal
		Set pfile = "/ICS/mirror/primary"
		Set timeout = 2
		Open pfile:("WNS"):timeout  // create new file or overwrite existing
		Use pfile
		Write $get(host),!
		Close pfile
		ZN "DMLSS_DB"
		Job GO^ZFILECONTROL()
	} Catch(ex) { }
	ZN "%SYS"
	Quit:$Quit 1
	Quit
	;
	// This procedure is called for informational purposes when
	//	 A failover member starts up and fails to become the primary or backup member.
	//	 The backup detects that the primary has failed and attempts to become primary but fails.
	// This entry point is called only once per incident; once it is called, it is not called again until the member either becomes primary or the primary is detected.
NotifyBecomePrimaryFailed()
	New
	Try {
		Set zstu = $Increment(^TESTzstu)
		Set ^TESTzstu(zstu) = $ZDateTime($NOW(),8,1,3)_" : "_$JOB_" : "_"NotifyBecomePrimaryFailed"_" : "_"ZMIRROR"
		Set arbiter = $$arbiterget^ZMIRRORHLPR()  //
		Write $get(arbiter),!
		Set host = $SYSTEM.INetInfo.LocalHostName()  // ip-10-123-45-67.us-gov-west-1.compute.internal
		Write $get(host),!
		Set tSC = ##class(DataServer.Util).CallECSRest("NotifyBecomePrimaryFailed")
	} Catch(ex) { }
	ZN "%SYS"
	Quit:$Quit 1
	Quit
